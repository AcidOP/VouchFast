datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]

  verificationToken VerificationToken[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  plan         Plan          @default(FREE)
  lists        List[]
  testimonials Testimonial[]
}

// ! ------------------- AUTHENTICATION ------------------- ! //

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.String
  access_token      String? @db.String
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.String
  session_state     String?

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(auto()) @map("_id") @db.ObjectId
  sessionToken String   @unique
  userId       String   @db.ObjectId
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model VerificationToken {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  identifier String
  token      String
  expires    DateTime
  User       User?    @relation(fields: [userId], references: [id])
  userId     String?  @db.ObjectId

  @@unique([identifier, token])
}

// ! -------------------  TESTIMONIALS ------------------- ! //

enum Plan {
  FREE
  PAID
}

model List {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  name        String
  headerTitle String
  headerDesc  String
  questions   String[] @default([])
  buttonText  String?

  testimonials Testimonial[]

  User   User?   @relation(fields: [userId], references: [id])
  userId String? @db.ObjectId
}

model Testimonial {
  id      String  @id @default(auto()) @map("_id") @db.ObjectId
  message String
  name    String
  email   String
  rating  String?

  list   List?   @relation(fields: [listId], references: [id])
  listId String? @db.ObjectId

  userId String? @db.ObjectId
  user   User?   @relation(fields: [userId], references: [id])

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}
